{"ast":null,"code":"// import React, { useEffect, useRef, useState } from \"react\";\n// import io from \"socket.io-client\";\n// import DrawingCanvas from \"./DrawingCanvas\";\n// import Toolbar from \"./Toolbar\";\n// import UserCursors from \"./UserCursors\";\n\n// const SOCKET_URL =\n//   process.env.REACT_APP_SOCKET || window.location.origin.replace(/^http/, \"ws\");\n\n// export default function Whiteboard({ roomId, onLeave }) {\n//   const [socket, setSocket] = useState(null);\n//   const [usersCount, setUsersCount] = useState(1);\n//   const [cursors, setCursors] = useState({});\n//   const colorRef = useRef(\"#000\");\n\n//   useEffect(() => {\n//     const s = io(SOCKET_URL, { transports: [\"websocket\"] });\n//     setSocket(s);\n//     s.on(\"connect\", () => {\n//       s.emit(\"join-room\", { roomId });\n//     });\n//     s.on(\"user-count\", ({ count }) => setUsersCount(count || 1));\n//     s.on(\"init-color\", ({ color }) => (colorRef.current = color));\n//     s.on(\"cursor-move\", ({ socketId, x, y, color }) => {\n//       setCursors((prev) => ({\n//         ...prev,\n//         [socketId]: { x, y, color, last: Date.now() },\n//       }));\n//     });\n//     s.on(\"user-left\", ({ socketId }) => {\n//       setCursors((prev) => {\n//         const n = { ...prev };\n//         delete n[socketId];\n//         return n;\n//       });\n//     });\n//     return () => {\n//       if (s) {\n//         s.emit(\"leave-room\", { roomId });\n//         s.disconnect();\n//       }\n//     };\n//   }, [roomId]);\n\n//   useEffect(() => {\n//     const t = setInterval(() => {\n//       const now = Date.now();\n//       setCursors((prev) => {\n//         const n = { ...prev };\n//         for (const k of Object.keys(n)) {\n//           if (now - n[k].last > 3000) delete n[k];\n//         }\n//         return n;\n//       });\n//     }, 1000);\n//     return () => clearInterval(t);\n//   }, []);\n\n//   return (\n//     <div className=\"whiteboard-wrap\">\n//       <div className=\"topbar\">\n//         <div className=\"count\">\n//           Room: <strong>{roomId}</strong> — Users: {usersCount}\n//         </div>\n//         <div style={{ display: \"flex\", gap: 8 }}>\n//           <button className=\"btn\" onClick={() => onLeave()}>\n//             Leave\n//           </button>\n//         </div>\n//       </div>\n//       <div className=\"canvas-area\">\n//         <DrawingCanvas socket={socket} roomId={roomId} myColorRef={colorRef} />\n//         <UserCursors cursors={cursors} />\n//       </div>\n//       <div className=\"toolbar\">\n//         <Toolbar socket={socket} roomId={roomId} />\n//       </div>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/asus/OneDrive/Desktop/whiteboard/client/src/components/Whiteboard.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from \"react\";\n// import io from \"socket.io-client\";\n// import DrawingCanvas from \"./DrawingCanvas\";\n// import Toolbar from \"./Toolbar\";\n// import UserCursors from \"./UserCursors\";\n\n// const SOCKET_URL =\n//   process.env.REACT_APP_SOCKET || window.location.origin.replace(/^http/, \"ws\");\n\n// export default function Whiteboard({ roomId, onLeave }) {\n//   const [socket, setSocket] = useState(null);\n//   const [usersCount, setUsersCount] = useState(1);\n//   const [cursors, setCursors] = useState({});\n//   const colorRef = useRef(\"#000\");\n\n//   useEffect(() => {\n//     const s = io(SOCKET_URL, { transports: [\"websocket\"] });\n//     setSocket(s);\n//     s.on(\"connect\", () => {\n//       s.emit(\"join-room\", { roomId });\n//     });\n//     s.on(\"user-count\", ({ count }) => setUsersCount(count || 1));\n//     s.on(\"init-color\", ({ color }) => (colorRef.current = color));\n//     s.on(\"cursor-move\", ({ socketId, x, y, color }) => {\n//       setCursors((prev) => ({\n//         ...prev,\n//         [socketId]: { x, y, color, last: Date.now() },\n//       }));\n//     });\n//     s.on(\"user-left\", ({ socketId }) => {\n//       setCursors((prev) => {\n//         const n = { ...prev };\n//         delete n[socketId];\n//         return n;\n//       });\n//     });\n//     return () => {\n//       if (s) {\n//         s.emit(\"leave-room\", { roomId });\n//         s.disconnect();\n//       }\n//     };\n//   }, [roomId]);\n\n//   useEffect(() => {\n//     const t = setInterval(() => {\n//       const now = Date.now();\n//       setCursors((prev) => {\n//         const n = { ...prev };\n//         for (const k of Object.keys(n)) {\n//           if (now - n[k].last > 3000) delete n[k];\n//         }\n//         return n;\n//       });\n//     }, 1000);\n//     return () => clearInterval(t);\n//   }, []);\n\n//   return (\n//     <div className=\"whiteboard-wrap\">\n//       <div className=\"topbar\">\n//         <div className=\"count\">\n//           Room: <strong>{roomId}</strong> — Users: {usersCount}\n//         </div>\n//         <div style={{ display: \"flex\", gap: 8 }}>\n//           <button className=\"btn\" onClick={() => onLeave()}>\n//             Leave\n//           </button>\n//         </div>\n//       </div>\n//       <div className=\"canvas-area\">\n//         <DrawingCanvas socket={socket} roomId={roomId} myColorRef={colorRef} />\n//         <UserCursors cursors={cursors} />\n//       </div>\n//       <div className=\"toolbar\">\n//         <Toolbar socket={socket} roomId={roomId} />\n//       </div>\n//     </div>\n//   );\n// }\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}